using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;
namespace ConsoleApp16
{
    class ClsCustomCollection:IEnumerator<Object>
    {
        ArrayList items;
        int indexNumber;
        Object cur;
        public ClsCustomCollection()
        {
            items = new ArrayList();
            indexNumber = -1;
        }

        public  Object Current { get => cur;}

        public void AddItem(object itemToAdd)
        {
            items.Add(itemToAdd);
        }

        public bool MoveNext()
        {
            if (++indexNumber >=items.Count)
            {
                return false;
            }
            else
            {
                cur=items[indexNumber];
                
            }
            return true;
        }
        public void Reset()
        {
            indexNumber = -1;
        }

        object IEnumerator.Current
        {
            get { return Current; }
        }

        #region IDisposable Support
        private bool disposedValue = false; // To detect redundant calls

        protected virtual void Dispose(bool disposing)
        {
            if (!disposedValue)
            {
                if (disposing)
                {
                    // TODO: dispose managed state (managed objects).
                }

                // TODO: free unmanaged resources (unmanaged objects) and override a finalizer below.
                // TODO: set large fields to null.

                disposedValue = true;
            }
        }

        // TODO: override a finalizer only if Dispose(bool disposing) above has code to free unmanaged resources.
        // ~ClsCustomCollection() {
        //   // Do not change this code. Put cleanup code in Dispose(bool disposing) above.
        //   Dispose(false);
        // }

        // This code added to correctly implement the disposable pattern.
        public void Dispose()
        {
            // Do not change this code. Put cleanup code in Dispose(bool disposing) above.
            Dispose(true);
            // TODO: uncomment the following line if the finalizer is overridden above.
            // GC.SuppressFinalize(this);
        }
        #endregion


    }
    class Program
    {
        static void Main(string[] args)
        {
            ClsCustomCollection myCustomClass = new ClsCustomCollection();
            myCustomClass.AddItem(1);
            myCustomClass.AddItem(2);
            myCustomClass.AddItem(3);
            myCustomClass.AddItem(4);

            while (myCustomClass.MoveNext())
            {
                Console.WriteLine(myCustomClass.Current.ToString());
            }

            Console.ReadKey();
        }
    }
}
